'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matches = exports.getMessage = exports.checkHtmlElement = undefined;

var _redent = require('redent');

var _redent2 = _interopRequireDefault(_redent);

var _jestMatcherUtils = require('jest-matcher-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HtmlElementTypeError = function (_Error) {
  _inherits(HtmlElementTypeError, _Error);

  function HtmlElementTypeError(received, matcherFn, context) {
    _classCallCheck(this, HtmlElementTypeError);

    /* istanbul ignore next */
    var _this = _possibleConstructorReturn(this, _Error.call(this));

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, matcherFn);
    }
    _this.message = [(0, _jestMatcherUtils.matcherHint)(`${context.isNot ? '.not' : ''}.${matcherFn.name}`, 'received', ''), '', `${(0, _jestMatcherUtils.RECEIVED_COLOR)('received')} value must be an HTMLElement.`, (0, _jestMatcherUtils.printWithType)('Received', received, _jestMatcherUtils.printReceived)].join('\n');
    return _this;
  }

  return HtmlElementTypeError;
}(Error);

function checkHtmlElement(htmlElement) {
  if (!(htmlElement instanceof HTMLElement)) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    throw new (Function.prototype.bind.apply(HtmlElementTypeError, [null].concat([htmlElement], args)))();
  }
}

function display(value) {
  return typeof value === 'string' ? value : (0, _jestMatcherUtils.stringify)(value);
}

function getMessage(matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return [`${matcher}\n`, `${expectedLabel}:\n${(0, _jestMatcherUtils.EXPECTED_COLOR)((0, _redent2.default)(display(expectedValue), 2))}`, `${receivedLabel}:\n${(0, _jestMatcherUtils.RECEIVED_COLOR)((0, _redent2.default)(display(receivedValue), 2))}`].join('\n');
}

function matches(textToMatch, node, matcher) {
  if (typeof matcher === 'string') {
    return textToMatch.toLowerCase().includes(matcher.toLowerCase());
  } else {
    return matcher.test(textToMatch);
  }
}

exports.checkHtmlElement = checkHtmlElement;
exports.getMessage = getMessage;
exports.matches = matches;