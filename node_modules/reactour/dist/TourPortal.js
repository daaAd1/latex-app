"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _scrollSmooth = _interopRequireDefault(require("scroll-smooth"));

var _scrollparent = _interopRequireDefault(require("scrollparent"));

var _index = require("./components/index");

var hx = _interopRequireWildcard(require("./helpers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var TourPortal =
/*#__PURE__*/
function (_Component) {
  _inherits(TourPortal, _Component);

  function TourPortal() {
    var _this;

    _classCallCheck(this, TourPortal);

    _this = _possibleConstructorReturn(this, (TourPortal.__proto__ || Object.getPrototypeOf(TourPortal)).call(this));
    Object.defineProperty(_assertThisInitialized(_this), "showStep", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value() {
        var steps = _this.props.steps;
        var current = _this.state.current;
        var step = steps[current];
        var node = step.selector ? document.querySelector(step.selector) : null;

        var stepCallback = function stepCallback(o) {
          if (step.action && typeof step.action === 'function') {
            step.action(o);
          }
        };

        if (step.observe) {
          var target = document.querySelector(step.observe);
          var config = {
            attributes: true,
            childList: true,
            characterData: true
          };

          _this.setState({
            observer: new MutationObserver(function (mutations) {
              mutations.forEach(function (mutation) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                  var cb = function cb() {
                    return stepCallback(mutation.addedNodes[0]);
                  };

                  setTimeout(function () {
                    return _this.calculateNode(mutation.addedNodes[0], step.position, cb);
                  }, 100);
                } else if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {
                  var _cb = function _cb() {
                    return stepCallback(node);
                  };

                  _this.calculateNode(node, step.position, _cb);
                }
              });
            })
          }, function () {
            return _this.state.observer.observe(target, config);
          });
        } else {
          if (_this.state.observer) {
            _this.state.observer.disconnect();

            _this.setState({
              observer: null
            });
          }
        }

        if (node) {
          var cb = function cb() {
            return stepCallback(node);
          };

          _this.calculateNode(node, step.position, cb);
        } else {
          _this.setState(setNodeSate(null, _this.helper, step.position), stepCallback);

          step.selector && console.warn("Doesn't found a DOM node '".concat(step.selector, "'.\n                    Please check the 'steps' Tour prop Array at position: ").concat(current + 1, "."));
        }
      }
    });
    Object.defineProperty(_assertThisInitialized(_this), "calculateNode", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(node, stepPosition, cb) {
        var _this$props = _this.props,
            scrollDuration = _this$props.scrollDuration,
            inViewThreshold = _this$props.inViewThreshold,
            scrollOffset = _this$props.scrollOffset;
        var attrs = hx.getNodeRect(node);
        var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

        if (!hx.inView(_objectSpread({}, attrs, {
          w: w,
          h: h,
          threshold: inViewThreshold
        }))) {
          var parentScroll = (0, _scrollparent.default)(node);

          _scrollSmooth.default.to(node, {
            context: hx.isBody(parentScroll) ? window : parentScroll,
            duration: scrollDuration,
            offset: scrollOffset || -(h / 2),
            callback: function callback(nd) {
              _this.setState(setNodeSate(nd, _this.helper, stepPosition), cb);
            }
          });
        } else {
          _this.setState(setNodeSate(node, _this.helper, stepPosition), cb);
        }
      }
    });
    Object.defineProperty(_assertThisInitialized(_this), "maskClickHandler", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(e) {
        var _this$props2 = _this.props,
            closeWithMask = _this$props2.closeWithMask,
            onRequestClose = _this$props2.onRequestClose;

        if (closeWithMask && !e.target.classList.contains(CN.mask.disableInteraction)) {
          onRequestClose(e);
        }
      }
    });
    Object.defineProperty(_assertThisInitialized(_this), "nextStep", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value() {
        var _this$props3 = _this.props,
            steps = _this$props3.steps,
            getCurrentStep = _this$props3.getCurrentStep;

        _this.setState(function (prevState) {
          var nextStep = prevState.current < steps.length - 1 ? prevState.current + 1 : prevState.current;

          if (typeof getCurrentStep === 'function') {
            getCurrentStep(nextStep);
          }

          return {
            current: nextStep
          };
        }, _this.showStep);
      }
    });
    Object.defineProperty(_assertThisInitialized(_this), "prevStep", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value() {
        var getCurrentStep = _this.props.getCurrentStep;

        _this.setState(function (prevState) {
          var nextStep = prevState.current > 0 ? prevState.current - 1 : prevState.current;

          if (typeof getCurrentStep === 'function') {
            getCurrentStep(nextStep);
          }

          return {
            current: nextStep
          };
        }, _this.showStep);
      }
    });
    Object.defineProperty(_assertThisInitialized(_this), "gotoStep", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(n) {
        var _this$props4 = _this.props,
            steps = _this$props4.steps,
            getCurrentStep = _this$props4.getCurrentStep;

        _this.setState(function (prevState) {
          var nextStep = steps[n] ? n : prevState.current;

          if (typeof getCurrentStep === 'function') {
            getCurrentStep(nextStep);
          }

          return {
            current: nextStep
          };
        }, _this.showStep);
      }
    });
    Object.defineProperty(_assertThisInitialized(_this), "keyDownHandler", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(e) {
        var _this$props5 = _this.props,
            onRequestClose = _this$props5.onRequestClose,
            nextStep = _this$props5.nextStep,
            prevStep = _this$props5.prevStep,
            disableKeyboardNavigation = _this$props5.disableKeyboardNavigation;
        e.stopPropagation();

        if (disableKeyboardNavigation) {
          return;
        }

        if (e.keyCode === 27) {
          // esc
          e.preventDefault();
          onRequestClose();
        }

        if (e.keyCode === 39) {
          // right
          e.preventDefault();
          typeof nextStep === 'function' ? nextStep() : _this.nextStep();
        }

        if (e.keyCode === 37) {
          // left
          e.preventDefault();
          typeof prevStep === 'function' ? prevStep() : _this.prevStep();
        }
      }
    });
    _this.state = {
      isOpen: false,
      current: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      width: 0,
      height: 0,
      w: 0,
      h: 0,
      inDOM: false,
      observer: null
    };
    return _this;
  }

  _createClass(TourPortal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _props = this.props,
          isOpen = _props.isOpen,
          startAt = _props.startAt;

      if (isOpen) {
        this.open(startAt);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _props2 = this.props,
          isOpen = _props2.isOpen,
          update = _props2.update,
          updateDelay = _props2.updateDelay;

      if (!isOpen && nextProps.isOpen) {
        this.open(nextProps.startAt);
      } else if (isOpen && !nextProps.isOpen) {
        this.close();
      }

      if (isOpen && update !== nextProps.update) {
        if (nextProps.steps[this.state.current]) {
          setTimeout(this.showStep, updateDelay);
        } else {
          this.props.onRequestClose();
        }
      }

      if (isOpen && nextProps.isOpen && this.state.current !== nextProps.goToStep) {
        this.gotoStep(nextProps.goToStep);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var isOpen = this.props.isOpen;

      if (isOpen) {
        this.close();
      }
    }
  }, {
    key: "open",
    value: function open(startAt) {
      var _this2 = this;

      var onAfterOpen = this.props.onAfterOpen;
      this.setState(function (prevState) {
        return {
          isOpen: true,
          current: startAt !== undefined ? startAt : prevState.current
        };
      }, function () {
        _this2.showStep();

        _this2.helper.focus();

        if (onAfterOpen) {
          onAfterOpen();
        }
      }); // TODO: debounce it.

      window.addEventListener('resize', this.showStep, false);
      window.addEventListener('keydown', this.keyDownHandler, false);
    }
  }, {
    key: "close",
    value: function close() {
      this.setState(function (prevState) {
        if (prevState.observer) {
          prevState.observer.disconnect();
        }

        return {
          isOpen: false,
          observer: null
        };
      }, this.onBeforeClose);
      window.removeEventListener('resize', this.showStep);
      window.removeEventListener('keydown', this.keyDownHandler);
    }
  }, {
    key: "onBeforeClose",
    value: function onBeforeClose() {
      var onBeforeClose = this.props.onBeforeClose;

      if (onBeforeClose) {
        onBeforeClose();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _props3 = this.props,
          className = _props3.className,
          steps = _props3.steps,
          maskClassName = _props3.maskClassName,
          showButtons = _props3.showButtons,
          showNavigation = _props3.showNavigation,
          showNavigationNumber = _props3.showNavigationNumber,
          showNumber = _props3.showNumber,
          onRequestClose = _props3.onRequestClose,
          maskSpace = _props3.maskSpace,
          lastStepNextButton = _props3.lastStepNextButton,
          nextButton = _props3.nextButton,
          prevButton = _props3.prevButton,
          badgeContent = _props3.badgeContent,
          highlightedMaskClassName = _props3.highlightedMaskClassName,
          disableInteraction = _props3.disableInteraction,
          disableDotsNavigation = _props3.disableDotsNavigation,
          nextStep = _props3.nextStep,
          prevStep = _props3.prevStep,
          rounded = _props3.rounded,
          accentColor = _props3.accentColor;
      var _state = this.state,
          isOpen = _state.isOpen,
          current = _state.current,
          inDOM = _state.inDOM,
          targetTop = _state.top,
          targetRight = _state.right,
          targetBottom = _state.bottom,
          targetLeft = _state.left,
          targetWidth = _state.width,
          targetHeight = _state.height,
          windowWidth = _state.w,
          windowHeight = _state.h,
          helperWidth = _state.helperWidth,
          helperHeight = _state.helperHeight,
          helperPosition = _state.helperPosition;

      if (isOpen) {
        return _react.default.createElement("div", null, _react.default.createElement("div", {
          ref: function ref(c) {
            return _this3.mask = c;
          },
          onClick: this.maskClickHandler,
          className: (0, _classnames.default)(CN.mask.base, _defineProperty({}, CN.mask.isOpen, isOpen))
        }, _react.default.createElement(_index.SvgMask, {
          windowWidth: windowWidth,
          windowHeight: windowHeight,
          targetWidth: targetWidth,
          targetHeight: targetHeight,
          targetTop: targetTop,
          targetLeft: targetLeft,
          padding: maskSpace,
          rounded: rounded,
          className: maskClassName,
          disableInteraction: disableInteraction,
          disableInteractionClassName: "".concat(CN.mask.disableInteraction, " ").concat(highlightedMaskClassName)
        })), _react.default.createElement(_index.Guide, {
          innerRef: function innerRef(c) {
            return _this3.helper = c;
          },
          targetHeight: targetHeight,
          targetWidth: targetWidth,
          targetTop: targetTop,
          targetRight: targetRight,
          targetBottom: targetBottom,
          targetLeft: targetLeft,
          windowWidth: windowWidth,
          windowHeight: windowHeight,
          helperWidth: helperWidth,
          helperHeight: helperHeight,
          helperPosition: helperPosition,
          padding: maskSpace,
          tabIndex: -1,
          current: current,
          style: steps[current].style ? steps[current].style : {},
          rounded: rounded,
          className: (0, _classnames.default)(CN.helper.base, className, _defineProperty({}, CN.helper.isOpen, isOpen)),
          accentColor: accentColor
        }, steps[current] && (typeof steps[current].content === 'function' ? steps[current].content({
          goTo: this.gotoStep,
          inDOM: inDOM,
          step: current + 1
        }) : steps[current].content), showNumber && _react.default.createElement(_index.Badge, {
          "data-tour-elem": "badge"
        }, typeof badgeContent === 'function' ? badgeContent(current + 1, steps.length) : current + 1), (showButtons || showNavigation) && _react.default.createElement(_index.Controls, {
          "data-tour-elem": "controls"
        }, showButtons && _react.default.createElement(_index.Arrow, {
          onClick: typeof prevStep === 'function' ? prevStep : this.prevStep,
          disabled: current === 0,
          label: prevButton ? prevButton : null
        }), showNavigation && _react.default.createElement(_index.Navigation, {
          "data-tour-elem": "navigation"
        }, steps.map(function (s, i) {
          return _react.default.createElement(_index.Dot, {
            key: "".concat(s.selector ? s.selector : 'undef', "_").concat(i),
            onClick: function onClick() {
              return _this3.gotoStep(i);
            },
            current: current,
            index: i,
            disabled: current === i || disableDotsNavigation,
            showNumber: showNavigationNumber,
            "data-tour-elem": "dot"
          });
        })), showButtons && _react.default.createElement(_index.Arrow, {
          onClick: current === steps.length - 1 ? lastStepNextButton ? onRequestClose : function () {} : typeof nextStep === 'function' ? nextStep : this.nextStep,
          disabled: !lastStepNextButton && current === steps.length - 1,
          inverted: true,
          label: lastStepNextButton && current === steps.length - 1 ? lastStepNextButton : nextButton ? nextButton : null
        })), _react.default.createElement(_index.Close, {
          onClick: onRequestClose
        })));
      }

      return _react.default.createElement("div", null);
    }
  }]);

  return TourPortal;
}(_react.Component);

Object.defineProperty(TourPortal, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    badgeContent: _propTypes.default.func,
    highlightedMaskClassName: _propTypes.default.string,
    className: _propTypes.default.string,
    closeWithMask: _propTypes.default.bool,
    inViewThreshold: _propTypes.default.number,
    isOpen: _propTypes.default.bool.isRequired,
    lastStepNextButton: _propTypes.default.node,
    maskClassName: _propTypes.default.string,
    maskSpace: _propTypes.default.number,
    nextButton: _propTypes.default.node,
    onAfterOpen: _propTypes.default.func,
    onBeforeClose: _propTypes.default.func,
    onRequestClose: _propTypes.default.func,
    prevButton: _propTypes.default.node,
    scrollDuration: _propTypes.default.number,
    scrollOffset: _propTypes.default.number,
    showButtons: _propTypes.default.bool,
    showNavigation: _propTypes.default.bool,
    showNavigationNumber: _propTypes.default.bool,
    showNumber: _propTypes.default.bool,
    startAt: _propTypes.default.number,
    goToStep: _propTypes.default.number,
    getCurrentStep: _propTypes.default.func,
    nextStep: _propTypes.default.func,
    prevStep: _propTypes.default.func,
    steps: _propTypes.default.arrayOf(_propTypes.default.shape({
      selector: _propTypes.default.string,
      content: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.element, _propTypes.default.func]).isRequired,
      position: _propTypes.default.oneOf(['top', 'right', 'bottom', 'left', 'center']),
      action: _propTypes.default.func,
      style: _propTypes.default.object
    })),
    update: _propTypes.default.string,
    updateDelay: _propTypes.default.number,
    disableInteraction: _propTypes.default.bool,
    disableDotsNavigation: _propTypes.default.bool,
    disableKeyboardNavigation: _propTypes.default.bool,
    rounded: _propTypes.default.number,
    accentColor: _propTypes.default.string
  }
});
Object.defineProperty(TourPortal, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    onAfterOpen: function onAfterOpen() {
      document.body.style.overflowY = 'hidden';
    },
    onBeforeClose: function onBeforeClose() {
      document.body.style.overflowY = 'auto';
    },
    showNavigation: true,
    showNavigationNumber: true,
    showButtons: true,
    showNumber: true,
    scrollDuration: 1,
    maskSpace: 10,
    updateDelay: 1,
    disableInteraction: false,
    rounded: 0,
    accentColor: '#007aff'
  }
});
var CN = {
  mask: {
    base: 'reactour__mask',
    isOpen: 'reactour__mask--is-open',
    disableInteraction: 'reactour__mask--disable-interaction'
  },
  helper: {
    base: 'reactour__helper',
    isOpen: 'reactour__helper--is-open'
  }
};

var setNodeSate = function setNodeSate(node, helper, position) {
  var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
  var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

  var _hx$getNodeRect = hx.getNodeRect(helper),
      helperWidth = _hx$getNodeRect.width,
      helperHeight = _hx$getNodeRect.height;

  var attrs = node ? hx.getNodeRect(node) : {
    top: h + 10,
    right: w / 2 + 9,
    bottom: h / 2 + 9,
    left: w / 2 - helperWidth / 2,
    width: 0,
    height: 0,
    w: w,
    h: h,
    helperPosition: 'center'
  };
  return function update() {
    return _objectSpread({
      w: w,
      h: h,
      helperWidth: helperWidth,
      helperHeight: helperHeight,
      helperPosition: position
    }, attrs, {
      inDOM: node ? true : false
    });
  };
};

var _default = TourPortal;
exports.default = _default;