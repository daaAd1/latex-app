"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _exenv = _interopRequireDefault(require("exenv"));

var _TourPortal = _interopRequireDefault(require("./TourPortal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var renderSubtreeIntoContainer = _reactDom.default.unstable_renderSubtreeIntoContainer;
var SafeHTMLElement = _exenv.default.canUseDOM ? window.HTMLElement : {};

function getParentElement(parentSelector) {
  return parentSelector();
}

var Tour =
/*#__PURE__*/
function (_Component) {
  _inherits(Tour, _Component);

  function Tour() {
    _classCallCheck(this, Tour);

    return _possibleConstructorReturn(this, (Tour.__proto__ || Object.getPrototypeOf(Tour)).apply(this, arguments));
  }

  _createClass(Tour, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.node = document.createElement('div');
      this.node.className = this.props.portalClassName;
      var parent = getParentElement(this.props.parentSelector);
      parent.appendChild(this.node);
      this.renderPortal(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var currentParent = getParentElement(this.props.parentSelector);
      var newParent = getParentElement(nextProps.parentSelector);

      if (newParent !== currentParent) {
        currentParent.removeChild(this.node);
        newParent.appendChild(this.node);
      }

      this.renderPortal(nextProps);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removePortal();
    }
  }, {
    key: "renderPortal",
    value: function renderPortal(props) {
      if (props.isOpen) {
        document.body.classList.add('reactour__body');
      } else {
        document.body.classList.remove('reactour__body');
      }

      this.portal = renderSubtreeIntoContainer(this, _react.default.createElement(_TourPortal.default, props), this.node);
    }
  }, {
    key: "removePortal",
    value: function removePortal() {
      _reactDom.default.unmountComponentAtNode(this.node);

      var parent = getParentElement(this.props.parentSelector);
      parent.removeChild(this.node);
      document.body.classList.remove('reactour__body');
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Tour;
}(_react.Component);

Object.defineProperty(Tour, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    isOpen: _propTypes.default.bool.isRequired,
    portalClassName: _propTypes.default.string,
    appElement: _propTypes.default.instanceOf(SafeHTMLElement),
    onAfterOpen: _propTypes.default.func,
    onRequestClose: _propTypes.default.func,
    closeWithMask: _propTypes.default.bool,
    parentSelector: _propTypes.default.func
  }
});
Object.defineProperty(Tour, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    isOpen: false,
    portalClassName: 'reactour-portal',
    closeWithMask: true,
    parentSelector: function parentSelector() {
      return document.body;
    }
  }
});
var _default = Tour;
exports.default = _default;